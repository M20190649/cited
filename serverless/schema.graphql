type Schema {
  query: Query
  mutation: Mutation
}

type Query {
  getAllMyCollections: [UserCollection!]
  getMyCollection(collId: ID!): UserCollection
  getMyCollectionArticle(collId: ID!, artId: ID!): UserCollectionArticle
}

type Mutation {
  createMyCollection(input: CollectionInput!): UserCollection
  updateMyCollection(collId: ID!, input: CollectionInput!): UserCollection
  deleteMyCollection(collId: ID!): UserCollection
  createMyCollectionArticle(collId: ID!, input: UserCollectionArticleInput!): UserCollectionArticle
  updateMyCollectionArticle(collId: ID!, artId: ID!, input: UserCollectionArticleInput!): UserCollectionArticle
  deleteMyCollectionArticle(collId: ID!, artId: ID!): UserCollectionArticle
  createMyCollectionArticles(collId: ID!, input: [UserCollectionArticleInput!]!): [UserCollectionArticle!]
  deleteMyCollectionArticles(collId: ID!, artIds: [ID!]!): [UserCollectionArticle!]
  createMyCollectionArticleRelation(collId: ID!, input: ArticleRelationInput!): ArticleRelation
  deleteMyCollectionArticleRelation(collId: ID!, input: ArticleRelationInput!):
    ArticleRelation
  createMyCollectionArticleRelations(collId: ID!, input: [ArticleRelationInput!]!): [ArticleRelation!]
  deleteMyCollectionArticleRelations(collId: ID!, input: [ArticleRelationInput!]!): [ArticleRelation!]
}

type UserCollection {
  userId: ID!
  collId: ID!
  title: String
  description: String
  articles: [UserCollectionArticle!]
}

type UserCollectionArticle {
  userId: ID!
  collId: ID!
  artId: ID!
  type: String
  title: String
  abstract: String
  year: Int
  subjects: [String!]
  keywords: [String!]
  authors: [ArticleAuthor!]
  venues: [ArticleVenue!]
  publishers: [ArticlePublisher!]
  externs: [ArticleExtern!]
  acknowledgements: [ArticleAcknowledgement!]
  references(limit: Int, nextToken: String): UserCollectionArticleRelatives
  citedBys(limit: Int, nextToken: String): UserCollectionArticleRelatives
}

type UserCollectionArticleRelatives {
  totalCount: Int
  nextToken: String
  artIds: [ID!]
  articles: [UserCollectionArticle!]
}

input CollectionInput {
  title: String
  description: String
}

input UserCollectionArticleInput {
  type: String
  title: String
  abstract: String
  year: Int
  authors: [AuthorInput!]
  subjects: [String!]
  keywords: [String!]
}

input AuthorInput {
  surname: String
  given: String
}

input ArticleRelationInput {
  referenceId: ID!
  citedById: ID!
}

type ArticleAcknowledgement {
  target: String
  subtarget: String
  text: String
}

type ArticleAuthor {
  authorId: ID
  surname: String
  given: String
  email: String
  affiliation: ArticleOrganization
}

type ArticleOrganization {
  organizationId: ID
  name: String
}

type ArticleVenue {
  venueId: ID
  name: String
  year: Int
}

type ArticlePublisher {
  publisherId: ID
  name: String
  articleUrl: String
}

type ArticleExtern {
  name: String # eg. "arxiv"
  type: String # eg. "url" or "id"
  data: String # eg "https://example.com/lskdjf"
}

type ArticleRelation {
  referenceId: ID!
  citedById: ID!
}